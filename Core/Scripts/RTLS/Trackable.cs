// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Trackable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RTLSProtocol {

  /// <summary>Holder for reflection information generated from Trackable.proto</summary>
  public static partial class TrackableReflection {

    #region Descriptor
    /// <summary>File descriptor for Trackable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9UcmFja2FibGUucHJvdG8SDFJUTFNQcm90b2NvbCKyBgoJVHJhY2thYmxl",
            "EgoKAmlkGAEgASgFEgwKBGN1aWQYAiABKAwSDAoEbmFtZRgDIAEoCRIQCghm",
            "cmFtZV9JRBgKIAEoBBIRCgl0aW1lc3RhbXAYCyABKAQSDwoHY29udGV4dBgM",
            "IAEoDBIpCghjaGlsZHJlbhgNIAMoCzIXLlJUTFNQcm90b2NvbC5UcmFja2Fi",
            "bGUSMgoIcG9zaXRpb24YBCABKAsyIC5SVExTUHJvdG9jb2wuVHJhY2thYmxl",
            "LlBvc2l0aW9uEjgKC29yaWVudGF0aW9uGAUgASgLMiMuUlRMU1Byb3RvY29s",
            "LlRyYWNrYWJsZS5PcmllbnRhdGlvbhIyCgh2ZWxvY2l0eRgGIAEoCzIgLlJU",
            "TFNQcm90b2NvbC5UcmFja2FibGUuVmVsb2NpdHkSOgoMYWNjZWxlcmF0aW9u",
            "GAcgASgLMiQuUlRMU1Byb3RvY29sLlRyYWNrYWJsZS5BY2NlbGVyYXRpb24S",
            "QQoQYW5ndWxhcl92ZWxvY2l0eRgIIAEoCzInLlJUTFNQcm90b2NvbC5UcmFj",
            "a2FibGUuQW5ndWxhclZlbG9jaXR5EkkKFGFuZ3VsYXJfYWNjZWxlcmF0aW9u",
            "GAkgASgLMisuUlRMU1Byb3RvY29sLlRyYWNrYWJsZS5Bbmd1bGFyQWNjZWxl",
            "cmF0aW9uGisKCFBvc2l0aW9uEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6",
            "GAMgASgBGjkKC09yaWVudGF0aW9uEgkKAXgYASABKAESCQoBeRgCIAEoARIJ",
            "CgF6GAMgASgBEgkKAXcYBCABKAEaKwoIVmVsb2NpdHkSCQoBeBgBIAEoAhIJ",
            "CgF5GAIgASgCEgkKAXoYAyABKAIaLwoMQWNjZWxlcmF0aW9uEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCGjIKD0FuZ3VsYXJWZWxvY2l0eRIJ",
            "CgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAho2ChNBbmd1bGFyQWNj",
            "ZWxlcmF0aW9uEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCInMK",
            "DlRyYWNrYWJsZUZyYW1lEhAKCGZyYW1lX0lEGAEgASgEEhEKCXRpbWVzdGFt",
            "cBgCIAEoBBIrCgp0cmFja2FibGVzGAMgAygLMhcuUlRMU1Byb3RvY29sLlRy",
            "YWNrYWJsZRIPCgdjb250ZXh0GAQgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable), global::RTLSProtocol.Trackable.Parser, new[]{ "Id", "Cuid", "Name", "FrameID", "Timestamp", "Context", "Children", "Position", "Orientation", "Velocity", "Acceleration", "AngularVelocity", "AngularAcceleration" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.Position), global::RTLSProtocol.Trackable.Types.Position.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.Orientation), global::RTLSProtocol.Trackable.Types.Orientation.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.Velocity), global::RTLSProtocol.Trackable.Types.Velocity.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.Acceleration), global::RTLSProtocol.Trackable.Types.Acceleration.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.AngularVelocity), global::RTLSProtocol.Trackable.Types.AngularVelocity.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.Trackable.Types.AngularAcceleration), global::RTLSProtocol.Trackable.Types.AngularAcceleration.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::RTLSProtocol.TrackableFrame), global::RTLSProtocol.TrackableFrame.Parser, new[]{ "FrameID", "Timestamp", "Trackables", "Context" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Trackable : pb::IMessage<Trackable> {
    private static readonly pb::MessageParser<Trackable> _parser = new pb::MessageParser<Trackable>(() => new Trackable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trackable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RTLSProtocol.TrackableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trackable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trackable(Trackable other) : this() {
      id_ = other.id_;
      cuid_ = other.cuid_;
      name_ = other.name_;
      frameID_ = other.frameID_;
      timestamp_ = other.timestamp_;
      context_ = other.context_;
      children_ = other.children_.Clone();
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      angularVelocity_ = other.angularVelocity_ != null ? other.angularVelocity_.Clone() : null;
      angularAcceleration_ = other.angularAcceleration_ != null ? other.angularAcceleration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trackable Clone() {
      return new Trackable(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID unique to device; could be unknown (-1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cuid" field.</summary>
    public const int CuidFieldNumber = 2;
    private pb::ByteString cuid_ = pb::ByteString.Empty;
    /// <summary>
    /// unique 128-bit ID used only for tracking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cuid {
      get { return cuid_; }
      set {
        cuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// e.g. Serial Number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_ID" field.</summary>
    public const int FrameIDFieldNumber = 10;
    private ulong frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private ulong timestamp_;
    /// <summary>
    /// Unix timestamp in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 12;
    private pb::ByteString context_ = pb::ByteString.Empty;
    /// <summary>
    /// variable length field for any extra information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 13;
    private static readonly pb::FieldCodec<global::RTLSProtocol.Trackable> _repeated_children_codec
        = pb::FieldCodec.ForMessage(106, global::RTLSProtocol.Trackable.Parser);
    private readonly pbc::RepeatedField<global::RTLSProtocol.Trackable> children_ = new pbc::RepeatedField<global::RTLSProtocol.Trackable>();
    /// <summary>
    /// recursive array of Trackables, e.g. if you want to group controllers under a headset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RTLSProtocol.Trackable> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::RTLSProtocol.Trackable.Types.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 5;
    private global::RTLSProtocol.Trackable.Types.Orientation orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.Orientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 6;
    private global::RTLSProtocol.Trackable.Types.Velocity velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.Velocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 7;
    private global::RTLSProtocol.Trackable.Types.Acceleration acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.Acceleration Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 8;
    private global::RTLSProtocol.Trackable.Types.AngularVelocity angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.AngularVelocity AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_acceleration" field.</summary>
    public const int AngularAccelerationFieldNumber = 9;
    private global::RTLSProtocol.Trackable.Types.AngularAcceleration angularAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RTLSProtocol.Trackable.Types.AngularAcceleration AngularAcceleration {
      get { return angularAcceleration_; }
      set {
        angularAcceleration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trackable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trackable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cuid != other.Cuid) return false;
      if (Name != other.Name) return false;
      if (FrameID != other.FrameID) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Context != other.Context) return false;
      if(!children_.Equals(other.children_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(AngularAcceleration, other.AngularAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cuid.Length != 0) hash ^= Cuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FrameID != 0UL) hash ^= FrameID.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      hash ^= children_.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (angularAcceleration_ != null) hash ^= AngularAcceleration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Orientation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Acceleration);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AngularVelocity);
      }
      if (angularAcceleration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AngularAcceleration);
      }
      if (FrameID != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(FrameID);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Timestamp);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(Context);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FrameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameID);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (angularAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularAcceleration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trackable other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cuid.Length != 0) {
        Cuid = other.Cuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FrameID != 0UL) {
        FrameID = other.FrameID;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      children_.Add(other.children_);
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::RTLSProtocol.Trackable.Types.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::RTLSProtocol.Trackable.Types.Orientation();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::RTLSProtocol.Trackable.Types.Velocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::RTLSProtocol.Trackable.Types.Acceleration();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          AngularVelocity = new global::RTLSProtocol.Trackable.Types.AngularVelocity();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.angularAcceleration_ != null) {
        if (angularAcceleration_ == null) {
          AngularAcceleration = new global::RTLSProtocol.Trackable.Types.AngularAcceleration();
        }
        AngularAcceleration.MergeFrom(other.AngularAcceleration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Cuid = input.ReadBytes();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::RTLSProtocol.Trackable.Types.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (orientation_ == null) {
              Orientation = new global::RTLSProtocol.Trackable.Types.Orientation();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 50: {
            if (velocity_ == null) {
              Velocity = new global::RTLSProtocol.Trackable.Types.Velocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 58: {
            if (acceleration_ == null) {
              Acceleration = new global::RTLSProtocol.Trackable.Types.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 66: {
            if (angularVelocity_ == null) {
              AngularVelocity = new global::RTLSProtocol.Trackable.Types.AngularVelocity();
            }
            input.ReadMessage(AngularVelocity);
            break;
          }
          case 74: {
            if (angularAcceleration_ == null) {
              AngularAcceleration = new global::RTLSProtocol.Trackable.Types.AngularAcceleration();
            }
            input.ReadMessage(AngularAcceleration);
            break;
          }
          case 80: {
            FrameID = input.ReadUInt64();
            break;
          }
          case 88: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 98: {
            Context = input.ReadBytes();
            break;
          }
          case 106: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Trackable message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Position : pb::IMessage<Position> {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position(Position other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position Clone() {
          return new Position(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private double x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private double y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private double z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Position);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Position other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
          if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
          if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (Y != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (Z != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0D) {
            size += 1 + 8;
          }
          if (Y != 0D) {
            size += 1 + 8;
          }
          if (Z != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Position other) {
          if (other == null) {
            return;
          }
          if (other.X != 0D) {
            X = other.X;
          }
          if (other.Y != 0D) {
            Y = other.Y;
          }
          if (other.Z != 0D) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
              case 25: {
                Z = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Orientation : pb::IMessage<Orientation> {
        private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Orientation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Orientation(Orientation other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          w_ = other.w_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Orientation Clone() {
          return new Orientation(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private double x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private double y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private double z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "w" field.</summary>
        public const int WFieldNumber = 4;
        private double w_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double W {
          get { return w_; }
          set {
            w_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Orientation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Orientation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(W, other.W)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
          if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
          if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
          if (W != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(W);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (Y != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (Z != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Z);
          }
          if (W != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(W);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0D) {
            size += 1 + 8;
          }
          if (Y != 0D) {
            size += 1 + 8;
          }
          if (Z != 0D) {
            size += 1 + 8;
          }
          if (W != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Orientation other) {
          if (other == null) {
            return;
          }
          if (other.X != 0D) {
            X = other.X;
          }
          if (other.Y != 0D) {
            Y = other.Y;
          }
          if (other.Z != 0D) {
            Z = other.Z;
          }
          if (other.W != 0D) {
            W = other.W;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
              case 25: {
                Z = input.ReadDouble();
                break;
              }
              case 33: {
                W = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Velocity : pb::IMessage<Velocity> {
        private static readonly pb::MessageParser<Velocity> _parser = new pb::MessageParser<Velocity>(() => new Velocity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Velocity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Velocity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Velocity(Velocity other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Velocity Clone() {
          return new Velocity(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Velocity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Velocity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Velocity other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Acceleration : pb::IMessage<Acceleration> {
        private static readonly pb::MessageParser<Acceleration> _parser = new pb::MessageParser<Acceleration>(() => new Acceleration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Acceleration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Acceleration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Acceleration(Acceleration other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Acceleration Clone() {
          return new Acceleration(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Acceleration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Acceleration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Acceleration other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AngularVelocity : pb::IMessage<AngularVelocity> {
        private static readonly pb::MessageParser<AngularVelocity> _parser = new pb::MessageParser<AngularVelocity>(() => new AngularVelocity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AngularVelocity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularVelocity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularVelocity(AngularVelocity other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularVelocity Clone() {
          return new AngularVelocity(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AngularVelocity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AngularVelocity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AngularVelocity other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AngularAcceleration : pb::IMessage<AngularAcceleration> {
        private static readonly pb::MessageParser<AngularAcceleration> _parser = new pb::MessageParser<AngularAcceleration>(() => new AngularAcceleration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AngularAcceleration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RTLSProtocol.Trackable.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularAcceleration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularAcceleration(AngularAcceleration other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AngularAcceleration Clone() {
          return new AngularAcceleration(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AngularAcceleration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AngularAcceleration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AngularAcceleration other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TrackableFrame : pb::IMessage<TrackableFrame> {
    private static readonly pb::MessageParser<TrackableFrame> _parser = new pb::MessageParser<TrackableFrame>(() => new TrackableFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackableFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RTLSProtocol.TrackableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableFrame(TrackableFrame other) : this() {
      frameID_ = other.frameID_;
      timestamp_ = other.timestamp_;
      trackables_ = other.trackables_.Clone();
      context_ = other.context_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableFrame Clone() {
      return new TrackableFrame(this);
    }

    /// <summary>Field number for the "frame_ID" field.</summary>
    public const int FrameIDFieldNumber = 1;
    private ulong frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "trackables" field.</summary>
    public const int TrackablesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::RTLSProtocol.Trackable> _repeated_trackables_codec
        = pb::FieldCodec.ForMessage(26, global::RTLSProtocol.Trackable.Parser);
    private readonly pbc::RepeatedField<global::RTLSProtocol.Trackable> trackables_ = new pbc::RepeatedField<global::RTLSProtocol.Trackable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RTLSProtocol.Trackable> Trackables {
      get { return trackables_; }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 4;
    private pb::ByteString context_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackableFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackableFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameID != other.FrameID) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!trackables_.Equals(other.trackables_)) return false;
      if (Context != other.Context) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameID != 0UL) hash ^= FrameID.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      hash ^= trackables_.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FrameID);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      trackables_.WriteTo(output, _repeated_trackables_codec);
      if (Context.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Context);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameID);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      size += trackables_.CalculateSize(_repeated_trackables_codec);
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackableFrame other) {
      if (other == null) {
        return;
      }
      if (other.FrameID != 0UL) {
        FrameID = other.FrameID;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      trackables_.Add(other.trackables_);
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameID = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 26: {
            trackables_.AddEntriesFrom(input, _repeated_trackables_codec);
            break;
          }
          case 34: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
